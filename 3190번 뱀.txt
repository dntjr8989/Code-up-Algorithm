#include <iostream>
#include <deque>

using namespace std;

int N, K;
int map[101][101] = { 0, };

struct Turn
{
	int time;
	char dir;
};

struct Snake
{
	int y;
	int x;
};

int L;
deque<Turn> turn;
deque<Snake> snake;

int main()
{
	//입력
	cin >> N;
	cin >> K;
	for (int i = 0; i < K; i++)
	{
		int appley, applex;
		cin >> appley >> applex;
		map[appley][applex] = 1;
	}
	cin >> L;
	for (int i = 0; i < L; i++)
	{
		Turn t;
		cin >> t.time >> t.dir;
		turn.push_back(t);
	}

	//
	int answer;
	Snake t;
	t.y = 1; t.x = 1;
	int snakedir = 0;//0 : 동쪽 //1 : 남쪽 //2 : 서쪽 //3 : 북쪽
	snake.push_back(t);

	map[1][1] = 2;

	for (answer = 1; ; answer++)
	{
		//뱀 몸 길이 늘림고 머리를 다음 칸에 위치시킨다.
		Snake snakeh = snake.back();

		if (snakedir == 0)
		{
			snakeh.x++;
		}
		else if (snakedir == 1)
		{
			snakeh.y++;
		}
		else if (snakedir == 2)
		{
			snakeh.x--;
		}
		else
		{
			snakeh.y--;
		}
		if (snakeh.x <= 0 || snakeh.x > N || snakeh.y <= 0 || snakeh.y > N) break;
		else if (map[snakeh.y][snakeh.x] == 2) break;

		//이동한 칸에 사과가 있으면 그 칸에 있던 사과 없어지고 꼬리 움직이지 않음.
		if (map[snakeh.y][snakeh.x] == 1)
		{
			map[snakeh.y][snakeh.x] = 2;
			snake.push_back(snakeh);
		}
		//이동한 칸에 사과가 없으면
		else
		{
			map[snakeh.y][snakeh.x] = 2;
			snake.push_back(snakeh);

			map[snake.front().y][snake.front().x] = 0;
			snake.pop_front();
		}
		if (turn.size() > 0)
		{
			if (turn.front().time == answer)
			{
				if (snakedir == 0)
				{
					//L : 북
					if (turn.front().dir == 'L')
					{
						snakedir = 3;
					}
					//D : 남
					else
					{
						snakedir = 1;
					}
				}
				else if (snakedir == 1)
				{
					//L : 동
					if (turn.front().dir == 'L')
					{
						snakedir = 0;
					}
					//D : 서
					else
					{
						snakedir = 2;
					}
				}
				else if (snakedir == 2)
				{
					//L : 남
					if (turn.front().dir == 'L')
					{
						snakedir = 1;
					}
					//D : 북
					else
					{
						snakedir = 3;
					}
				}
				else
				{
					//L : 서
					if (turn.front().dir == 'L')
					{
						snakedir = 2;
					}
					//D : 동
					else
					{
						snakedir = 0;
					}
				}
				turn.pop_front();
			}
		}
	}
	//출력
	cout << answer;
	return 0;
}