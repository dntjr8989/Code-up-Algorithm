#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int N, M, answer;
int map[50][50];
bool check[14];

vector<pair<int, int>> chicken;
vector<pair<int, int>> house;

void Dfs(int num, int cnt)
{
    //종료조건
    if (num > chicken.size()) return;

    // M개의 치킨집이 정해지면 종료
    if (cnt == M && cnt > 0)
    {
        int sum = 0;

        for (int i = 0; i < house.size(); i++)
        {
            int dist = 99999;
            for (int j = 0; j < chicken.size(); j++)
            {
                if (check[j] == 1)
                {
                    int d = abs(house[i].first - chicken[j].first) + abs(house[i].second - chicken[j].second);
                    
                    if (dist > d) dist = d;
                }
            }
            sum += dist;
        }
        if (sum < answer) answer = sum;
    }

    // 현재 치킨집을 사용할 경우
    check[num] = true;
    Dfs(num + 1, cnt + 1);

    // 사용하지 않는 경우
    check[num] = false;
    Dfs(num + 1, cnt);
}

int main()
{
    //입력
    cin >> N >> M;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> map[i][j];
            if (map[i][j] == 1)
                house.push_back(make_pair(i, j));
            else if (map[i][j] == 2)
                chicken.push_back(make_pair(i, j));
        }
    }

    answer = 9999999;

    Dfs(0, 0);

    cout << answer;

    return 0;
}