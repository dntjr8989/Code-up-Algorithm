#include <iostream>
#include <vector>
#include <string.h>
#include <deque>
#include <Windows.h>

using namespace std;

int N, M;
int map[8][8];
int answer = -1;

struct XY {
	int y; int x;
};

vector<XY> virus;

void BFS()
{
	int checkmap[8][8];
	int cnt = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			checkmap[i][j] = map[i][j];
			if (map[i][j] == 0)
			{
				cnt++;
			}
		}
	}

	deque<XY> virust;

	for (int i = 0; i < virus.size(); i++)
	{
		virust.push_back(virus[i]);
	}

	while (virust.size() > 0)
	{
		XY t;
		t = virust.front();
		virust.pop_front();
		
		//상
		if (t.y - 1 >= 0)
		{
			if (checkmap[t.y - 1][t.x] == 0)
			{
				XY tt;
				tt.y = t.y - 1; tt.x = t.x;
				virust.push_back(tt);
				checkmap[t.y-1][t.x] = 2;
				cnt--;
			}
		}
		//하
		if (t.y + 1 < N)
		{
			if (checkmap[t.y + 1][t.x] == 0)
			{
				XY tt;
				tt.y = t.y + 1; tt.x = t.x;
				virust.push_back(tt);
				checkmap[t.y+1][t.x] = 2;
				cnt--;
			}
		}
		//좌
		if (t.x - 1 >= 0)
		{
			if (checkmap[t.y][t.x-1] == 0)
			{
				XY tt;
				tt.y = t.y; tt.x = t.x-1;
				virust.push_back(tt);
				checkmap[t.y][t.x-1] = 2;
				cnt--;
			}
		}
		//우
		if (t.x + 1 < M)
		{
			if (checkmap[t.y][t.x + 1] == 0)
			{
				XY tt;
				tt.y = t.y; tt.x = t.x + 1;
				virust.push_back(tt);
				checkmap[t.y][t.x+1] = 2;
				cnt--;
			}
		}
		if (cnt < answer) break;
	}
	if (cnt > answer)
	{
		answer = cnt;
	}
}
int main()
{
	//입력
	cin >> N >> M;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> map[i][j];
			if (map[i][j] == 2)
			{
				XY t; t.y = i; t.x = j;
				virus.push_back(t);
			}
		}
	}
	//벽 둘 좌표 3개 설정
	for (int y1 = 0; y1 < N; y1++)
	{
		for (int x1 = 0; x1 < M; x1++)
		{
			if (map[y1][x1] != 0) continue;

			for (int y2 = y1; y2 < N; y2++)
			{
				int x2;
				if (y2 == y1) x2 = x1 + 1;
				else x2 = 0;
				
				for (; x2 < M; x2++)
				{
					if (map[y2][x2] != 0) continue;

					for (int y3 = y2; y3 < N; y3++)
					{
						int x3;
						if (y3 == y2) x3 = x2 + 1;
						else x3 = 0;
						
						for (; x3 < M; x3++)
						{
							if (map[y3][x3] != 0) continue;

							map[y1][x1] = 1;
							map[y2][x2] = 1;
							map[y3][x3] = 1;
							BFS();
							map[y1][x1] = 0;
							map[y2][x2] = 0;
							map[y3][x3] = 0;
						}
					}
				}
			}
		}
	}

	//출력
	cout << answer;
}